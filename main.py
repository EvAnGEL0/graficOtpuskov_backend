# main.py
from fastapi import FastAPI, Depends, HTTPException
from sqlalchemy.ext.asyncio import AsyncSession
from typing import List
from fastapi.middleware.cors import CORSMiddleware

import database
import models
import schemas
from auth import get_password_hash, create_access_token, get_current_user, verify_password

app = FastAPI()

# –†–∞–∑—Ä–µ—à–∞–µ–º React (http://localhost:3000)
app.add_middleware(
    CORSMiddleware,
    allow_origins=["http://localhost:3000"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –°–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—ã
@app.on_event("startup")
async def init_db():
    async with database.engine.begin() as conn:
        await conn.run_sync(models.Base.metadata.create_all)

# –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –¥–ª—è —Å–µ—Å—Å–∏–∏
async def get_db():
    async with database.AsyncSessionLocal() as session:
        yield session

# üîê –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@app.post("/register", response_model=schemas.Token)
async def register(user: schemas.UserCreate, db: AsyncSession = Depends(get_db)):
    # –ü—Ä–æ–≤–µ—Ä–∏–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    result = await db.execute(models.User.__table__.select().where(models.User.username == user.username))
    if result.fetchone():
        raise HTTPException(status_code=400, detail="–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–Ω—è—Ç–æ")

    hashed_pw = get_password_hash(user.password)
    new_user = models.User(username=user.username, hashed_password=hashed_pw)
    db.add(new_user)
    await db.commit()
    await db.refresh(new_user)

    # –í—ã–¥–∞–µ–º —Ç–æ–∫–µ–Ω
    access_token = create_access_token(data={"sub": user.username})
    return {"access_token": access_token, "token_type": "bearer"}

# üîê –í—Ö–æ–¥ (–ª–æ–≥–∏–Ω)
@app.post("/login", response_model=schemas.Token)
async def login(user: schemas.UserCreate, db: AsyncSession = Depends(get_db)):
    result = await db.execute(models.User.__table__.select().where(models.User.username == user.username))
    db_user = result.fetchone()

    if not db_user or not verify_password(user.password, db_user.hashed_password):
        raise HTTPException(status_code=401, detail="–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –∏–ª–∏ –ø–∞—Ä–æ–ª—å")

    access_token = create_access_token(data={"sub": db_user.username})
    return {"access_token": access_token, "token_type": "bearer"}

# üõ°Ô∏è –ü—Ä–∏–º–µ—Ä –∑–∞—â–∏—â—ë–Ω–Ω–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞
@app.get("/me")
async def read_users_me(current_user = Depends(get_current_user)):
    return {"username": current_user.username, "id": current_user.id}

# üìù –í—Å–µ –º–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è Todo ‚Äî –∑–∞—â–∏—â–∞–µ–º –æ—Ç –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö
@app.get("/todos/", response_model=List[schemas.TodoResponse])
async def get_todos(
    db: AsyncSession = Depends(get_db),
    current_user = Depends(get_current_user)
):
    result = await db.execute(models.Todo.__table__.select())
    todos = result.fetchall()
    return [
        schemas.TodoResponse(
            id=row.id,
            title=row.title,
            description=row.description,
            completed=row.completed
        )
        for row in todos
    ]

@app.post("/todos/", response_model=schemas.TodoResponse)
async def create_todo(
    todo: schemas.TodoCreate,
    db: AsyncSession = Depends(get_db),
    current_user = Depends(get_current_user)
):
    new_todo = models.Todo(**todo.dict())
    db.add(new_todo)
    await db.commit()
    await db.refresh(new_todo)
    return new_todo